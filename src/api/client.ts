/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/Billing/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["BillViewModel"];
                    "text/json": components["schemas"]["BillViewModel"];
                    "application/*+json": components["schemas"]["BillViewModel"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Billing/add-update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["BillViewModel"];
                    "text/json": components["schemas"]["BillViewModel"];
                    "application/*+json": components["schemas"]["BillViewModel"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Billing/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Class/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Export/export-sample": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Export/validate-excel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "multipart/form-data": {
                        /** Format: binary */
                        file?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Export/import-data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "multipart/form-data": {
                        /** Format: binary */
                        file?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Export/danger-reset-data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/LedgerAccount/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["LedgerAccountViewModel"];
                    "text/json": components["schemas"]["LedgerAccountViewModel"];
                    "application/*+json": components["schemas"]["LedgerAccountViewModel"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/LedgerAccount/add-update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["LedgerAccountViewModel"];
                    "text/json": components["schemas"]["LedgerAccountViewModel"];
                    "application/*+json": components["schemas"]["LedgerAccountViewModel"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/LedgerAccount/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Parent/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ParentViewModel"];
                    "text/json": components["schemas"]["ParentViewModel"];
                    "application/*+json": components["schemas"]["ParentViewModel"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Parent/add-update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ParentViewModel"];
                    "text/json": components["schemas"]["ParentViewModel"];
                    "application/*+json": components["schemas"]["ParentViewModel"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Parent/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Setting/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Setting/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["SettingViewModel"];
                    "text/json": components["schemas"]["SettingViewModel"];
                    "application/*+json": components["schemas"]["SettingViewModel"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/StudentParentAssignment/init": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["StudentParentAssignmentViewModel"];
                    "text/json": components["schemas"]["StudentParentAssignmentViewModel"];
                    "application/*+json": components["schemas"]["StudentParentAssignmentViewModel"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/StudentPromotion/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["StudentPromotionViewModel"];
                    "text/json": components["schemas"]["StudentPromotionViewModel"];
                    "application/*+json": components["schemas"]["StudentPromotionViewModel"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/StudentPromotion/add-update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["StudentPromotionViewModel"];
                    "text/json": components["schemas"]["StudentPromotionViewModel"];
                    "application/*+json": components["schemas"]["StudentPromotionViewModel"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/StudentPromotion/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Students/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["StudentSearchViewModel"];
                    "text/json": components["schemas"]["StudentSearchViewModel"];
                    "application/*+json": components["schemas"]["StudentSearchViewModel"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Students/add-update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["StudentViewModel"];
                    "text/json": components["schemas"]["StudentViewModel"];
                    "application/*+json": components["schemas"]["StudentViewModel"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Students/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/StudentSubjectAssignment/init": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["StudentSubjectAssignmentViewModel"];
                    "text/json": components["schemas"]["StudentSubjectAssignmentViewModel"];
                    "application/*+json": components["schemas"]["StudentSubjectAssignmentViewModel"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Subject/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["SubjectViewModel"];
                    "text/json": components["schemas"]["SubjectViewModel"];
                    "application/*+json": components["schemas"]["SubjectViewModel"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Teacher/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["TeacherViewModel"];
                    "text/json": components["schemas"]["TeacherViewModel"];
                    "application/*+json": components["schemas"]["TeacherViewModel"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Teacher/add-update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["TeacherViewModel"];
                    "text/json": components["schemas"]["TeacherViewModel"];
                    "application/*+json": components["schemas"]["TeacherViewModel"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Teacher/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/TeacherSubjectAssignment/init": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["TeacherSubjectAssignmentViewModel"];
                    "text/json": components["schemas"]["TeacherSubjectAssignmentViewModel"];
                    "application/*+json": components["schemas"]["TeacherSubjectAssignmentViewModel"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Voucher/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Voucher/add-update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["VoucherViewModel"];
                    "text/json": components["schemas"]["VoucherViewModel"];
                    "application/*+json": components["schemas"]["VoucherViewModel"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/Voucher/detail/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * @description 0 = Assets account - cash, bank, property<br>1 = Liability account - loans, payables<br>2 = Income account - revenue, sales<br>3 = Expenses account - salaries, rent<br>4 = Control account - summary ledgers<br>5 = All - Filter
         * @enum {string}
         */
        AccountTypeEnum: "Assets" | "Liability" | "Income" | "Expenses" | "Control" | "All";
        BillItemViewModel: {
            /** Format: uuid */
            id?: string;
            itemName?: string | null;
            /** Format: double */
            amount?: number;
            /** Format: double */
            discount?: number;
            /** Format: double */
            netAmount?: number;
        };
        /**
         * @description 1 = Temporary draft bill, not finalized yet<br>2 = Final bill, sent as invoice<br>3 = Exam bill, sent as invoice
         * @enum {string}
         */
        BillType: "Draft" | "Invoice" | "Exam";
        BillViewModel: {
            /**
             * Format: uuid
             * @description Unique identifier for the bill.
             */
            id?: string;
            /** @description Bill number assigned to this bill. */
            billNumber?: string | null;
            /**
             * Format: uuid
             * @description Unique identifier for the student associated with this bill.
             */
            studentId?: string;
            billType?: components["schemas"]["BillType"];
            /**
             * Format: date-time
             * @description Date when the bill was generated.
             */
            billingDate?: string;
            /** @description Indicates whether the bill has been paid. */
            isPaid?: boolean | null;
            /** @description Additional remarks or notes for the bill. */
            remarks?: string | null;
            /** @description List of items included in this bill. */
            billItems?: components["schemas"]["BillItemViewModel"][] | null;
            /**
             * Format: int32
             * @description Number of records per page for pagination.
             */
            pageSize?: number;
            /**
             * Format: int32
             * @description Current page number for pagination.
             */
            pageNumber?: number;
        };
        LedgerAccountViewModel: {
            /**
             * Format: uuid
             * @description Unique identifier for the ledger account.
             */
            id?: string;
            /** @description Name of the ledger account (e.g., 'Cash', 'Bank', 'Tuition Income'). */
            accountName?: string | null;
            /** @description Unique account code (e.g., '1001'). */
            accountCode?: string | null;
            /** @description Account group code or name for classification (e.g., 'Assets', 'Income'). */
            accountGroup?: string | null;
            accountType?: components["schemas"]["AccountTypeEnum"];
            /**
             * Format: int32
             * @description Number of records per page for pagination.
             */
            pageSize?: number;
            /**
             * Format: int32
             * @description Current page number for pagination.
             */
            pageNumber?: number;
        };
        ParentViewModel: {
            /**
             * Format: uuid
             * @description Unique identifier for the parent.
             */
            id?: string;
            idNumber?: string | null;
            /** @description Full name of the parent. */
            fullName?: string | null;
            /** @description Relation to the student (Father, Mother, Guardian). */
            relation?: string | null;
            /** @description Phone number of the parent. */
            phoneNumber?: string | null;
            /** @description Email address of the parent. */
            email?: string | null;
            /** @description Address of the parent. */
            address?: string | null;
            /**
             * Format: uuid
             * @description User account ID associated with the parent.
             */
            userId?: string | null;
            /**
             * Format: int32
             * @description Number of records per page for pagination.
             */
            pageSize?: number;
            /**
             * Format: int32
             * @description Current page number for pagination.
             */
            pageNumber?: number;
        };
        SettingViewModel: {
            /** @description Name of the school. */
            schoolName: string;
            /** @description Address of the school. */
            schoolAddress?: string | null;
            /** @description Contact phone number for the school. */
            phoneNumber?: string | null;
            /** @description Contact email address for the school. */
            email?: string | null;
            /** @description Website URL of the school. */
            website?: string | null;
            /** @description URL of the school's logo image. */
            logoUrl?: string | null;
            /** @description URL of the school's favicon image. */
            faviconUrl?: string | null;
            /** @description Academic year for the school (e.g., '2025-2026'). */
            academicYear?: string | null;
            /** @description Currency used for billing and transactions (default: NPR). */
            currency?: string | null;
            /** @description Date format used throughout the system (default: 'yyyy-MM-dd'). */
            dateFormat?: string | null;
            /** @description Enable SMS notifications for school events and alerts. */
            enableSmsNotifications?: boolean;
            /** @description Enable email notifications for school events and alerts. */
            enableEmailNotifications?: boolean;
            /** @description Automatically generate monthly bills for students. */
            autoGenerateMonthlyBills?: boolean;
            /**
             * Format: int32
             * @description Day of the month when bills should be generated (1-31).
             */
            billGenerationDay?: number;
            /** @description Enable the attendance management module. */
            enableAttendanceModule?: boolean;
            /** @description Enable the exam management module. */
            enableExamModule?: boolean;
            /** @description Time zone setting for the school (default: UTC). */
            timeZone?: string | null;
            /** @description Language setting for the system (default: English). */
            language?: string | null;
        };
        StudentParentAssignmentViewModel: {
            /**
             * Format: uuid
             * @description Unique identifier for the student being assigned.
             */
            studentId?: string;
            /**
             * Format: uuid
             * @description Unique identifier for the parent being assigned.
             */
            parentId?: string;
            /** @description Indicates if the assignment is active (true) or revoked (false). */
            isNotRevoke?: boolean;
        };
        StudentPromotionViewModel: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            studentId?: string;
            /** Format: uuid */
            classId?: string;
            remarks?: string | null;
            /** Format: date-time */
            date?: string | null;
            fy?: string | null;
            studentIds?: string[] | null;
        };
        StudentSearchViewModel: {
            idNumber?: string | null;
            /** @description Student's first name. */
            firstName?: string | null;
            /** @description Student's middle name. */
            middleName?: string | null;
            /** @description Student's last name. */
            lastName?: string | null;
            /**
             * Format: date-time
             * @description Student's date of birth.
             */
            dateOfBirth?: string;
            /** @description Student's gender (Male, Female, Other). */
            gender?: string | null;
            /** @description Admission number assigned to the student. */
            admissionNumber?: string | null;
            /** @description Name of the class the student is enrolled in. */
            className?: string | null;
            /**
             * Format: uuid
             * @description Unique identifier for the class.
             */
            classId?: string | null;
            /**
             * Format: uuid
             * @description Unique identifier for the parent.
             */
            parentId?: string | null;
            /**
             * Format: uuid
             * @description Ledger account ID associated with the student.
             */
            ledgerAccountId?: string | null;
            /**
             * Format: int32
             * @description Number of records per page for pagination.
             */
            pageSize?: number;
            /**
             * Format: int32
             * @description Current page number for pagination.
             */
            pageNumber?: number;
        };
        StudentSubjectAssignmentViewModel: {
            /**
             * Format: uuid
             * @description Unique identifier for the student being assigned to the subject.
             */
            studentId?: string;
            /**
             * Format: uuid
             * @description Unique identifier for the subject being assigned.
             */
            subjectId?: string;
            /**
             * Format: uuid
             * @description Unique identifier for the class where the subject is taught.
             */
            classId?: string;
            /** @description Indicates if the assignment is active (true) or revoked (false). */
            isNotRevoke?: boolean;
            /** @description List of Unique identifier for the subject being assigned. */
            subjectIds?: string[] | null;
        };
        StudentViewModel: {
            /** Format: uuid */
            id?: string;
            /**
             * Format: date-time
             * @description Date and time when the student record was created.
             */
            createdAt?: string | null;
            idNumber: string;
            /** @description Student's first name. */
            firstName: string;
            /** @description Student's middle name. */
            middleName?: string | null;
            /** @description Student's last name. */
            lastName: string;
            /**
             * Format: date
             * @description Student's date of birth.
             */
            dateOfBirth: string;
            /** @description Student's gender (Male, Female, or Other). */
            gender: string;
            /** @description Student's current address. */
            address: string;
            /** @description Student's permanent address. */
            permanentAddress?: string | null;
            /**
             * Format: tel
             * @description Student's phone number.
             */
            phoneNumber: string;
            /**
             * Format: email
             * @description Student's email address.
             */
            email?: string | null;
            /** @description Admission number assigned to the student. */
            admissionNumber: string;
            /**
             * Format: date-time
             * @description Date when the student was admitted.
             */
            admissionDate: string;
            /** @description Student's roll number. */
            rollNumber?: string | null;
            /** @description Name of the student's previous school. */
            previousSchool?: string | null;
            /** @description Indicates if the student is on scholarship. */
            isScholarship?: boolean;
            /** @description Student's citizenship number. */
            citizenshipNumber?: string | null;
            /** @description Student's passport number. */
            passportNumber?: string | null;
            /** @description Student's national ID number. */
            nationalId?: string | null;
            /** @description URL to the student's photo. */
            photoUrl?: string | null;
            /** @description URL to the student's signature image. */
            signatureUrl?: string | null;
            /**
             * Format: date
             * @description Date when the ID was issued.
             */
            idIssuedDate?: string | null;
            /** @description Place where the ID was issued. */
            idIssuedPlace?: string | null;
            /** @description Student's blood group. */
            bloodGroup?: string | null;
            /** @description Any medical notes related to the student. */
            medicalNotes?: string | null;
            /** @description Name of the emergency contact person. */
            emergencyContactName?: string | null;
            /**
             * Format: tel
             * @description Emergency contact phone number.
             */
            emergencyContactNumber?: string | null;
            /** @description Relation with the emergency contact person. */
            relationWithEmergencyContact?: string | null;
            /** @description Name of the class the student is enrolled in. */
            className?: string | null;
            /**
             * Format: uuid
             * @description Unique identifier for the class.
             */
            classId: string;
            /**
             * Format: uuid
             * @description Ledger account ID associated with the student.
             */
            ledgerAccountId?: string | null;
            subjects?: components["schemas"]["SubjectViewModel"][] | null;
            parents?: components["schemas"]["ParentViewModel"][] | null;
            studentPromotions?: components["schemas"]["StudentPromotionViewModel"][] | null;
        };
        SubjectViewModel: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            classId?: string;
            name?: string | null;
            code?: string | null;
            /** Format: int32 */
            creditHours?: number;
        };
        TeacherSubjectAssignmentViewModel: {
            /**
             * Format: uuid
             * @description Unique identifier for the teacher being assigned to the subject.
             */
            teacherId?: string;
            /**
             * Format: uuid
             * @description Unique identifier for the subject being assigned.
             */
            subjectId?: string;
            /**
             * Format: uuid
             * @description Unique identifier for the class where the subject is taught.
             */
            classId?: string;
            /** @description Indicates if the assignment is active (true) or revoked (false). */
            isNotRevoke?: boolean;
            /** @description List of Unique identifier for the subject being assigned. */
            subjectIds?: string[] | null;
        };
        TeacherViewModel: {
            /**
             * Format: uuid
             * @description Unique identifier for the teacher.
             */
            id?: string;
            idNumber?: string | null;
            /** @description Full name of the teacher. */
            fullName?: string | null;
            /** @description Gender of the teacher (Male, Female, Other). */
            gender?: string | null;
            /** @description Phone number of the teacher. */
            phoneNumber?: string | null;
            /** @description Email address of the teacher. */
            email?: string | null;
            /** @description Address of the teacher. */
            address?: string | null;
            /**
             * Format: uuid
             * @description User account ID associated with the teacher.
             */
            userId?: string | null;
            /**
             * Format: date-time
             * @description Date when the teacher was hired.
             */
            hireDate?: string;
            /** @description Teachers Subject ids. */
            subjectIds?: string[] | null;
            /** @description Teachers Subject ids. */
            classIds?: string[] | null;
            /**
             * Format: int32
             * @description Number of records per page for pagination.
             */
            pageSize?: number;
            /**
             * Format: int32
             * @description Current page number for pagination.
             */
            pageNumber?: number;
        };
        VoucherTransaction: {
            /**
             * Format: uuid
             * @description Ledger account ID from which the amount is debited.
             */
            fromId?: string;
            /**
             * Format: uuid
             * @description Ledger account ID to which the amount is credited.
             */
            toId?: string;
            /**
             * Format: double
             * @description Amount for this transaction line.
             */
            amount?: number;
            /** @description Remarks for this transaction line. */
            remarks?: string | null;
        };
        /**
         * @description 1 = A receipt voucher is issued when money is received (e.g., from student fees, donations, etc.).<br>2 = A payment voucher is issued when money is paid out (e.g., expenses, salaries, vendor payments).<br>3 = A contra voucher is used to record transactions within the same entity, such as cash deposited into a bank account or withdrawn from the bank.<br>4 = A journal voucher is used for non-cash adjustments like depreciation, provisions, or corrections.<br>5 = Represents all types of vouchers. Usually used for reporting or filtering purposes.
         * @enum {string}
         */
        VoucherType: "Receipt" | "Payment" | "Contra" | "Journal" | "All";
        VoucherViewModel: {
            /**
             * Format: date-time
             * @description Date of the voucher transaction.
             */
            voucherDate?: string;
            /** @description Unique voucher number assigned to this transaction. */
            voucherNumber?: string | null;
            type?: components["schemas"]["VoucherType"];
            /** @description Narration or remarks for the voucher. */
            narration?: string | null;
            /** @description List of transactions (debit/credit lines) included in this voucher. */
            transactions?: components["schemas"]["VoucherTransaction"][] | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
